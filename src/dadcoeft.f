C $$$$$$
C MHP 06/02
      SUBROUTINE DADCOEFT(DR,DT,EI,EJ,EW,NTOT,WIND1,WIND2,DJ,
     *                    ECOD2,SUMDJ,LFIX,LOKAD)
      PARAMETER (JSON=5000, NMAX=8000)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT LOGICAL*4(L)
C MHP 3/09 ADDED OPTION TO SCALE THE SATURATION RATE BY THE OVERTURN TIMESCALE
      COMMON/DEUTER/DRATE(JSON),DRATE0(JSON),FMASSACC,JCZ
C DIFFUSION COEFFICIENTS FOR THE TERMS INVOLVING D/DR (OMEGA)
C (ECOD3) AND D/DR (D OMEGA/DR) (ECOD4).
      COMMON/DIFAD/ECOD3(JSON),ECOD4(JSON)
      COMMON/DIFAD3/FACD2(JSON),FACD3(JSON),VESD2(JSON),VESD3(JSON),
     *              ECOD5(JSON),ECOD6(JSON),FGEOM(JSON),FV0(JSON),
     *              FV1A(JSON),FV1B(JSON),FV2A(JSON),FV2B(JSON),
     *              EV0(JSON),EV1A(JSON),EV1B(JSON),EV2A(JSON),
     *              EV2B(JSON),DSS(JSON),DGSF(JSON),ESS(JSON),EGSF(JSON)
C time change of theta
      COMMON/DIFADDT/ETHVN(JSON),ETHVP(JSON),EWST(JSON),EQWRST(JSON)
C CONVERGENCE CRITERION
      COMMON/DIFUS/DTDIF,DJOK,ITDIF1,ITDIF2
C VALUES OF D CHI/DR AT THE ZONE EDGES AND ZONE CENTERS
      COMMON/EGRIDCHI/QCHIRE(JSON),QCHIRC(JSON)
C DEFINITION TERMS FOR THE SECOND AND THIRD DERIVATIVE
C TERMS
      COMMON/EGRIDDER/EQQCOD(JSON),EQQQCOD(JSON),QQCOD(JSON),
     *                QQQCOD(JSON)
      COMMON/VMULT/FW,FC,FO,FES,FGSF,FMU,FSS,RCRIT
      COMMON/VMULT2/FESC,FSSC,FGSFC,IES,IGSF,IMU
      COMMON/DIFAD4/FGEOMIX(JSON),VESN(JSON),REQ(JSON)
C MHP 8/17 ADDED EXCEN, C_2 TO COMMON BLOCK FOR MATT ET AL. 2012 CENT. TERM
      COMMON/CWIND/WMAX,EXMD,EXW,EXTAU,EXR,EXM,EXL,EXPR,CONSTFACTOR,
     *             STRUCTFACTOR,EXCEN,C_2,LJDOT0
C      COMMON/CWIND/WMAX,EXMD,EXW,EXTAU,EXR,EXM,CONSTFACTOR,STRUCTFACTOR,LJDOT0
C G Somers 3/17, ADDING NEW TAUCZ COMMON BLOCK
      COMMON/OVRTRN/LNEWTCZ,LCALCENV,TAUCZ,TAUCZ0,PPHOT,PPHOT0,FRACSTEP
      DIMENSION EI(JSON),EW(JSON),EJ(JSON),DJ(JSON),
     *          A(NMAX,10),B(NMAX),EWPREV(JSON),DWIT(50),IWIT(50),
     *          FX1(JSON),QWR(JSON),WM(JSON),ECOD2(JSON),
     *          EWIT(JSON),WM0(JSON),EWIT2(JSON),WMP(JSON),
     *          QWRP(JSON),EWT(JSON),WMINIT(JSON),QWRINIT(JSON)
      DIMENSION C(NMAX),D(NMAX),AA(NMAX,10),QQWCC(JSON)
      SAVE
C  DCOEFT SETS UP THE COEFFICIENTS FOR THE DIFFUSION DIFFERENCE EQUATION.
C
C  INPUT VARIABLES:
C  ECOD : DIFFUSION COEFFICIENTS AT THE EQUALLY SPACED GRID POINTS.
C  DR : GRID SPACING.
C  DT : TIMESTEP.
C  EI : RUN OF MOMENTS OF INERTIA OF EQUALLY SPACED GRID POINTS.
C  EW : RUN OF ANGULAR VELOCITY OF EQUALLY SPACED GRID POINTS.
C  NTOT : NUMBER OF EQUALLY SPACED GRID POINTS.
C  WIND1 : THE ANGULAR MOMENTUM LOSS FROM A SURFACE C.Z. COMPUTED
C     EXPLICITILY.
C  WIND2 : AS WIND1, BUT COMPUTED IMPLICITLY.
C  *NOTE: IF NOT APPLICABLE, WIND1 AND WIND2 ARE ZEROED OUT.
C
C  OUTPUT VARIABLES :
C  THE ANGULAR VELOCITY OF SHELL I AT TIME N+1 (W(I,N+1)) IS A FUNCTION OF
C  W(I-1),W(I),AND W(I+1) AS DISCUSSED BELOW.  THIS CAN BE EXPRESSED
C  AS A TRIDIAGONAL MATRIX.
C  A(I) : CONTAINS ALL TERMS INVOLVING OMEGA(I-1).
C  B(I) : CONTAINS ALL TERMS INVOLVING OMEGA(I).
C  C(I) : CONTAINS ALL TERMS INVOLVING OMEGA(I+1)
C  D(I) : THE ANGULAR VELOCITY TERMS AT THE BEGINNING OF THE TIMESTEP.
C  *NOTE: ANGULAR MOMENTUM LOSS FROM A SURFACE C.Z. IS SUBTRACTED FROM
C     THE LAST ELEMENT OF ARRAY D IF APPLICABLE.
C
C  THE DIFFUSION EQUATION WE ARE SOLVING IS
C  dW/dT = 1/(4pi*RHO*R**2) 1/(I/M) d/dR(D*dW/dR)
C  WHERE D IS OUR DIFFUSION COEFFICIENT,W IS THE ANGULAR VELOCITY,
C  I IS THE MOMENT OF INERTIA,M IS MASS,T IS TIME,R IS RADIUS,
C  AND RHO IS DENSITY.
C  USING M = 4pi*RHO*R**2*DR THIS IS DIFFERENCED FOR SHELL I AS
C  W(I,N+1)-W(I,N)=(DT/DR)*(1/I)*(D(I+1/2)*(W(I+1,N+1)-W(I,N+1)) -
C  D(I-1/2)*(W(I,N+1)-W(I-1,N+1)))
C  WHERE INDEX N+1 REFERS TO VALUES AT THE END OF THE TIMESTEP,AND
C  INDEX N REFERS TO VALUES AT THE BEGINNING OF THE TIMESTEP.
C  THIS SYSTEM IS SUPPLEMENTED WITH APPROPRIATE BOUNDARY CONDITIONS.
C
C WE ARE SOLVING A 4XN SYSTEM OF EQUATIONS.
C INITIAL DEFINITIONS:
C OMEGA IS STORED IN THE FIRST ENTRY
C D^2 OMEGA/DR^2 TERM IS STORED IN THE SECOND
C D OMEGA/DR TERM IS STORED IN THE THIRD
C D^3 OMEGA/DR^3 TERM IS STORED IN THE FOURTH
C NOTE THAT SINCE THE DERIVATIVES ARE DEFINED IN
C TERMS OF LOWER ORDER QUANTITIES WE DON'T NEED THE
C START OF TIMESTEP VALUES FOR THEM.
      NCUT = 0
      NSTEP = 1
      DT0 = DT
      WIND20 = WIND2
      TINY = 1.0D-30
C STORE START OF TIMESTEP GRADIENTS AND
C AVERAGED OMEGAS.
      DO I = 2,NTOT
         QWR(I) = QCHIRE(I)*(EW(I)-EW(I-1))/DR
         WM0(I) = 0.5D0*(EW(I)+EW(I-1))
      END DO
      NM = 4*NTOT-2
C LOOP FOR TIMESTEP CUTTING
 5    CONTINUE
      SUMDT = 0.0D0
C STORE START OF TIMESTEP OMEGA VALUES
      WIND2 = WIND20
      SUMJ = 0.0D0
      DO I = 1,NTOT
         EWPREV(I) = EW(I)
         EWIT(I) = EW(I)
         EWIT2(I) = EW(I)
         EWT(I) = EW(I)
         SUMJ = SUMJ + EW(I)*EI(I)
      END DO
      DO I = 2,NTOT
         WMP(I) = WM0(I)
         QWRP(I) = QWR(I)
      END DO
      DO NNNN = 1,NSTEP
         DT = DT0/DFLOAT(NSTEP)
         SUMDT = SUMDT + DT
         FXX = DT/DT0
C LOOP FOR ITERATION ON THE D THETA/DT TERM;
C COEFFICIENTS UPDATED ONCE PER NNN
      DO NNN = 1,ITDIF2
C LOOP FOR ITERATION ON THE OTHER COEFFICIENTS
C THAT ARE FUNCTIONS OF OMEGA; UPDATED ONCE PER
C NN.
         LOKAD = .FALSE.
C UPDATE JDOT TERM
         IF(NNN.GT.1 .AND. WIND2.GT.0.0D0)THEN
C G Somers 8/17
C ADD ROSSBY SCALING IF DESIRED.
            IF(LROSSBY)THEN
               WSAT = WMAX*PMMSOLTAU/TAUCZ
            ELSE
               WSAT = WMAX
            ENDIF
C COMMENT OUT OLD WMAX STUFF
CC MHP 3/09 IF WMAX > 1 THEN ASSUME THAT THE PARAMETER WMAX IS DEFINED BY
CC WMAX = WMAX(SUN)*TAUCZ(SUN) AND THE SATURATION THRESHOLD WSAT = WMAX/TAUCZ(STAR)
C            IF(WMAX.GT.1.0D0)THEN
C               IF(TAUCZ.GT.1.0D0)THEN
C                  WSAT = WMAX/TAUCZ
C               ELSE
C                  WRITE(*,912)WMAX,TAUCZ
C 912      FORMAT('ERROR IN WIND - TAUCZ NOT DEFINED ',1P2E12.3,'STOPPED')
C                  STOP
C               ENDIF
C            ELSE
C               WSAT = WMAX
C            ENDIF
            WP = MIN(EW(NTOT),WSAT)
            WN = MIN(EWPREV(NTOT),WSAT)
            WIND2 = WIND20*(WN/WP)**(EXW-1.0D0)*
     *              (EWPREV(NTOT)/EW(NTOT))
         ENDIF
      DO NN = 1,ITDIF2
C COMPUTE THE DIFFUSION COEFFICIENTS FOR
C THE FIRST AND SECOND ORDER TERMS.
      IF(NNNN.EQ.1)THEN
         DO I = 2,NTOT
            WMINIT(I) = 0.5D0*(EWST(I)+EWST(I-1))
            QWRINIT(I) = EQWRST(I)
         END DO
      ELSE
         DO I = 2,NTOT
            WMINIT(I) = WMP(I)
            QWRINIT(I) = QWRP(I)
         END DO
      ENDIF
      QQWCC(1) = 0.0D0
      DO I = 2,NTOT-1
         QQWCC(I) = (EWPREV(I+1)-2.0D0*EWPREV(I)+
     *               EWPREV(I-1))
      END DO
      QQWCC(NTOT) = 0.0D0
      DO I = 2,NTOT
         WM(I) = 0.5D0*(EWPREV(I)+EWPREV(I-1))
     *   -0.125D0*(QQWCC(I)-QQWCC(I-1))
C         WM(I) = 0.5D0*(WM(I)+WMINIT(I))
         WMI = 0.5D0*(EWIT2(I)+EWIT2(I-1))
         QWR2 = QCHIRE(I)*(EWPREV(I)-EWPREV(I-1))/DR
C         QWR2 = 0.5D0*(QWR2+QWRINIT(I))
         QWRI = QCHIRE(I)*(EWIT2(I)-EWIT2(I-1))/DR
         IF(ABS(QWR(I)).GT.TINY)THEN
            ESS(I) = ESS(I)*(QWR2/QWR(I))**2
            EGSF(I) = EGSF(I)*(QWR2/QWR(I))**2
         ENDIF
         V1 = FW*EV0(I)*WM(I)**2*(EV1A(I)+WM(I)**2*EV1B(I))
C         VTH = FW*(ETHVN(I)*WM(I)*QWR2-ETHVP(I))/DT
         VTHN = 0.0D0
C         VTHN = FW*ETHVN(I)*WM(I)**2/DT
C         VTHP = -FW*ETHVP(I)/DT
C          VTHP = FW/DT0*(ETHVN(I)*WMI*QWRI-ETHVP(I))
CC          VTHP0 = FW/DT0*(ETHVN(I)*WM0(I)*QWR(I)-ETHVP(I))
CC          VTHP1 = FW/DT*ETHVN(I)*(WMI*QWRI-WMP(I)*QWRP(I))
CC          IF(NSTEP.LE.2)THEN
CC             VTHP = VTHP0+VTHP1
CC          ELSE
             VTHP = 0.0D0
CC          ENDIF
C         VTHN = FW*WM(I)*(ETHVN(I)*WM(I)-ETHVP(I)/QWR2)/DT
C         VTHN = MAX(0.0D0,VTHN)
C SET D THETA/DT TERM TO ZERO ON THE FIRST ITERATION
         IF(NNN.EQ.1)THEN
C         IF(NTOT.GT.1)THEN
            VTHN=0.0D0
            VTHP=0.0D0
         ENDIF
         V2 = FW*EV0(I)*WM(I)**2*(EV2A(I)+EV2B(I))+VTHN
         V1 = V1 + VTHP
C         ECOD3(I) = 0.2D0*(V1+VTH)*FGEOM(I)
         ECOD3(I) = 0.2D0*V1*FGEOM(I)
         ECOD4(I) = (0.2D0*V2+ESS(I)+EGSF(I))*FGEOM(I)
         ECOD4(I) = MAX(0.0D0,ECOD4(I))
      END DO
C USE THE PRIOR RUN TO CORRECT THE
C DIFFUSION COEFFICIENTS FOR CHANGES IN OMEGA;
C FX1 IS USED FOR THE THIRD AND FOURTH ORDER TERMS.
      DO I = 2,NTOT
         FX1(I) = 2.0D0*WM(I)/(EW(I)+EW(I-1))
      END DO
C RIGHT HAND SIDE - STARTING OMEGA RUN
      DO I = 1,NTOT
         II = 1 + 4*(I-1)
         B(II) = EWT(I)
         B(II+1) = 0.D0
         B(II+2) = 0.D0
         B(II+3) = 0.D0
         D(II) = EWT(I)
         D(II+1) = 0.D0
         D(II+2) = 0.D0
         D(II+3) = 0.D0
      END DO
C INCLUDE ANGULAR MOMENTUM LOSS
      DELJ = -0.5D0*(WIND1+WIND2)*EI(NTOT)*FXX
      B(4*NTOT-3) = B(4*NTOT-3)*(1.0D0+DELJ/EI(NTOT)/EWT(NTOT))
      D(4*NTOT-3) = B(4*NTOT-3)
C GLOBAL FACTOR FOR THE DIFFUSION COEFFICIENTS
      FACT0 = DT/DR
C IF LDIFAD=T, WE ARE SOLVING A COMBINED DIFFUSION/ADVECTION EQUATION.
C THIS ADDS A TERM D/DR(RHO*R**4*V*W) TO THE ORIGINAL D/DR(RHO*R**4*
C V*R*DW/DR) EQUATION.  SINCE V DEPENDS ON OMEGA AND ITS FIRST THROUGH
C THIRD DERIVATIVES, WE CAN EFFECTIVELY RECAST THIS AS A SET OF 4 FIRST
C ORDER EQUATIONS.
C  FIRST SHELL BOUNDARY CONDITIONS: NO FLOW BELOW THE BOUNDARY
C  I.E. THE ANGULAR MOMENTUM TRANSPORT AT THE FIRST SHELL DOES NOT
C  DEPEND ON THE SHELLS BELOW IT.
      FACT = FACT0/EI(1)
      FACTA = 0.5D0*DT/EI(1)/DR
C ZERO OUT INITIAL COEFFICIENT MATRIX
      DO I = 1,NM
         DO J = 1,10
            A(I,J) = 0.0D0
         END DO
      END DO
C OMEGA TERMS - ADVECTIVE
      A(1,5) = 1.0D0  - FACTA*ECOD3(2)
      A(1,9) = -FACTA*ECOD3(2)
C OMEGA TERMS - DW/DR
      A(1,7) = -FACT*QCHIRE(2)*ECOD4(2)
C OMEGA TERMS - D2W/DR2
C      A(1,6) = -FACTA*ECOD5(2)*FX1(2)
C      FPL = EQQCOD(2)*QCHIRE(2)*FX1(2)
      A(1,10) = -FACTA*QCHIRE(2)*ECOD5(2)*FX1(2)
C     *          +0.125D0*ECOD3(2)*DR**2/FPL
C OMEGA TERMS - D3W/DR3
      A(1,8) = FACT*QCHIRE(2)*ECOD6(2)*FX1(2)
C D^2W/DR^2 - SET TO ZERO AT THE LOWER BOUNDARY.
      A(2,5) = 1.0D0
C      A(2,6) = -EQQCOD(2)*QCHIRE(2)/DR*FX1(2)
C D OMEGA/DR TERMS
      A(3,3) = 1.0D0/DR
      A(3,5) = 1.0D0
      A(3,7) = -1.0D0/DR
C D^3W/DR^3
C APPLY B.C. TO THE HIGHEST ORDER TERM
C      A(4,3) = EQQQCOD(1)*QCHIRE(2)/DR
      A(4,5) = 1.0D0
C      A(4,7) = -EQQQCOD(2)*QCHIRE(2)/DR
      A(4,9) = -1.0D0/3.0D0
      DO II = 2,NTOT-1
         FACT = FACT0/EI(II)
         FACTA = 0.5D0*DT/EI(II)/DR
         I = 1+(II-1)*4
C OMEGA TERMS - ADVECTIVE
         A(I,1) = FACTA*ECOD3(II)
         A(I,5) = 1.0D0 + FACTA*(ECOD3(II)-
     *            ECOD3(II+1))
         A(I,9) = -FACTA*ECOD3(II+1)
C OMEGA TERMS - DW/DR
         A(I,3) = FACT*QCHIRE(II)*ECOD4(II)
         A(I,7) = -FACT*QCHIRE(II+1)*ECOD4(II+1)
C OMEGA TERMS - D2W/DR2
C         FMI = EQQCOD(II)*QCHIRE(II)*FX1(II)
C         FPL = EQQCOD(II+1)*QCHIRE(II+1)*FX1(II+1)
         A(I,2) = FACTA*QCHIRE(II)*ECOD5(II)*FX1(II)
C     *           -0.125D0*ECOD3(II)*DR**2/FMI
         A(I,6) = FACTA*(ECOD5(II)*QCHIRE(II)*FX1(II)
     *          - ECOD5(II+1)*QCHIRE(II+1)*FX1(II+1))
C     *          +0.125D0*DR**2*(ECOD3(II)/FMI - ECOD3(II+1)/FPL)
         A(I,10) = -FACTA*ECOD5(II+1)*QCHIRE(II+1)*FX1(II+1)
C     *           +0.125D0*ECOD3(II+1)*DR**2/FPL
C OMEGA TERMS - D3W/DR3
         A(I,4) = FACT*ECOD6(II)*QCHIRE(II)*FX1(II)
         A(I,8) = -FACT*ECOD6(II+1)*QCHIRE(II+1)*FX1(II+1)
C D^2W/DR^2 COEFFICIENTS
         A(I+1,2) = EQQCOD(II)*QCHIRE(II)/DR*FX1(II)
         A(I+1,5) = 1.0D0
         A(I+1,6) = -EQQCOD(II+1)*QCHIRE(II+1)/DR*FX1(II+1)
C D W/DR COEFFICIENTS
         A(I+2,3) = 1.0D0/DR
         A(I+2,5) = 1.0D0
         A(I+2,7) = -1.0D0/DR
C D^3 W/DR^3 COEFFICIENTS
         A(I+3,3) = QCHIRE(II)*EQQQCOD(II)/DR
         A(I+3,5) = 1.0D0
         A(I+3,7) = -QCHIRE(II)*EQQQCOD(II+1)/DR
      END DO
C  LAST SHELL B.C. : SAME AS FIRST SHELL B.C.
      FACT = FACT0/EI(NTOT)
      FACTA = 0.5D0*DT/EI(NTOT)/DR
      I = 4*NTOT - 3
C      A(I-1,3) = 0.0D0
C      A(I-1,7) = 0.0D0
C      A(I-1,1) = -1.0D0/3.0D0
C ZERO OUT TERMS RELATED TO D2W/DR2 AT THE EDGES
      A(I-4,10) = 0.0D0
      A(5,2) = 0.0D0
      IF(.NOT.LFIX)THEN
C OMEGA TERMS - ADVECTIVE
         A(I,1) = FACTA*ECOD3(NTOT)
         A(I,5) = 1.0D0 + FACTA*ECOD3(NTOT)
C OMEGA TERMS - DW/DR
         A(I,3) = FACT*QCHIRE(NTOT)*ECOD4(NTOT)
C OMEGA TERMS - D2W/DR2
C         FMI = EQQCOD(NTOT)*QCHIRE(NTOT)*FX1(NTOT)
         A(I,2) = FACTA*QCHIRE(NTOT)*ECOD5(NTOT)*FX1(NTOT)
C     *            -0.125D0*ECOD3(NTOT)*DR**2/FMI
C         A(I,6) = FACTA*QCHIRE(NTOT)*ECOD5(NTOT)*FX1(NTOT)
C OMEGA TERMS - D3W/DR3
         A(I,4) = FACT*QCHIRE(NTOT)*ECOD6(NTOT)
      ELSE
C HOLD OMEGA FIXED
         A(I,5) = 1.0D0
      ENDIF
C D^2W/DR^2 COEFFICIENTS: ASSUME DW/DR = 0 ABOVE BOUNDARY
C      A(I+1,2) = EQQCOD(NTOT)*QCHIRC(NTOT)/DR*FX1(NTOT)
      A(I+1,5) = 1.0D0
C D W/DR COEFFICIENTS AND D^3 W/DR^3 COEFFICIENTS NOT USED,
C SINCE THEY ARE TREATED AS ZERO ABOVE THE UNSTABLE REGION
C STORE COEFFICIENT MATRIX TO CHECK ON THE MATRIX INVERSION
      DO I = 1,10
         DO J = 1,NM
            AA(J,I) = A(J,I)
         END DO
      END DO
C NOW DECOMPOSE THE BAND MATRIX.  SRS. ARE FROM NUMERICAL
C RECIPES.
C SUBDIAGONAL ROWS
      M1 = 4
C SUPERDIAGONAL ROWS
      M2 = 5
C NM = TOTAL NUMBER OF ELEMENTS, 4 PER SHELL
C      WRITE(*,909)(ECOD3(I),ECOD4(I),ECOD5(I),ECOD6(I),
C     *             EV0(I),EV1A(I),EV1B(I),EV2A(I),
C     *             EV2B(I),I=1,NTOT)
C 909  FORMAT(1P9E12.3)
C      WRITE(*,910)((A(J,I),I=1,10),J=1,NM)
 910  FORMAT(1P10E12.3)
      CALL BANDW(A,NM,M1,M2,B)
C CHECK ON MATRIX INVERSION
      DO I =1,NM
         C(I) = 0.0D0
      END DO
      DO I = 5,10
         C(1) = C(1) + AA(1,I)*B(I-4)
      END DO
      DO I = 4,10
         C(2) = C(2) + AA(2,I)*B(I-3)
      END DO
      DO I = 3,10
         C(3) = C(3) + AA(3,I)*B(I-2)
      END DO
      DO I = 2,10
         C(4) = C(4) + AA(4,I)*B(I-1)
      END DO
      DO J = 5,NM-5
         DO I = 1,10
            C(J) = C(J) + AA(J,I)*B(I-5+J)
         END DO
      END DO
      DO I = 1,9
         C(NM-4) = C(NM-4)+AA(NM-4,I)*B(I+NM-9)
      END DO
      DO I = 1,8
         C(NM-3) = C(NM-3)+AA(NM-3,I)*B(I+NM-8)
      END DO
      DO I = 1,7
         C(NM-2) = C(NM-2)+AA(NM-2,I)*B(I+NM-7)
      END DO
      DO I = 1,6
         C(NM-1) = C(NM-1)+AA(NM-1,I)*B(I+NM-6)
      END DO
      DO I = 1,5
         C(NM) = C(NM)+AA(NM,I)*B(I+NM-5)
      END DO
C CONVERT RUN OF OMEGA TO DELTA OMEGA
      SUMDJ = 0.0D0
      SUMDJ2 = 0.0D0
C DWMAX - CHANGE FROM THE PREVIOUS LOW-LEVEL ITERATION
C (NN).
      DWMAX = (B(1)-EWPREV(1))/EWPREV(1)
      IWMAX = 1
C DWW - ABSOLUTE CHANGE FROM THE INITIAL VECTOR OF OMEGA
      DWW = (B(1)-EW(1))/EW(1)
      IWW = 1
C DWI - CHANGE FROM THE RESULT OF THE PRIOR MEDIUM
C LEVEL ITERATION (NNN).
      DWI = (B(1)-EWIT(1))/EWIT(1)
      IWI = 1
      DO I = 1,NTOT
         II = 1+4*(I-1)
         DJ(I) = (B(II)-EW(I))*EI(I)
         SUMDJ2 = SUMDJ2 + (B(II)-EWT(I))*EI(I)
         SUMDJ = SUMDJ + DJ(I)
         DW = (B(II)-EWPREV(I))/EWPREV(I)
         DW2 = (B(II)-EW(I))/EW(I)
         DWI2 = (B(II)-EWIT(I))/EWIT(I)
         IF(ABS(DW).GT.ABS(DWMAX))THEN
            IWMAX = I
            DWMAX = DW
         ENDIF
         IF(ABS(DW2).GT.ABS(DWW))THEN
            IWW = I
            DWW = DW2
         ENDIF
         IF(ABS(DWI2).GT.ABS(DWI))THEN
            IWI = I
            DWI = DWI2
         ENDIF
      END DO
C DAMP OUT LARGE (SPURIOUS) CHANGES IN OMEGA
      IF(ABS(DWMAX).GT.0.1D0)THEN
         WRITE(*,*)NNNN,NNN,NN
         WRITE(*,*)'CORRECTIONS TOO LARGE ',DWMAX,IWMAX
         LOKAD = .FALSE.
C      WRITE(*,920)((AA(I,J),J=1,10),B(I),C(I),D(I),I=1,NM)
 920  FORMAT(1P13E10.3)
         GOTO 950
      ELSE IF(ABS(DWMAX).LT.1.0D-2)THEN
         FX = 1.0D0
      ELSE
C         FX = 0.01D0/ABS(DWMAX)
         FX = 1.0D0
      ENDIF
      SUMJ2 = 0.0D0
      DO I = 1,NTOT
         II = 1+4*(I-1)
         EWPREV(I) = EWPREV(I)+FX*(B(II)-EWPREV(I))
         DJ(I) = DJ(I)*FX
         SUMJ2 = SUMJ2+EWPREV(I)*EI(I)
      END DO
C ANGULAR MOMENTUM CONSERVATION ENFORCED
      CORR = (SUMJ+DELJ)/SUMJ2
      WRITE(*,*)SUMJ,DELJ,SUMJ2,CORR
      SUMDJ = 0.0D0
      DO I = 1,NTOT
         EWPREV(I) = EWPREV(I)*CORR
         DJ(I) = (EWPREV(I)-EW(I))*EI(I)
         SUMDJ = SUMDJ + DJ(I)
      END DO
      WRITE(*,*)SUMDJ,DELJ
C      WRITE(*,912)FX,DWMAX,SUMDJ
C 912  FORMAT(1P2E12.3)
C      WRITE(*,913)(EW(I),EWPREV(I),DJ(I),I=1,NTOT)
C 913  FORMAT(1P6E12.3)
      DWIT(NN) = DWMAX
      IWIT(NN) = IWMAX
C DETERMINE IF RUN HAS CONVERGED
      IF(ABS(DWMAX).LT.DJOK)THEN
         LOKAD = .TRUE.
         GOTO 900
      ENDIF
      END DO
 900  CONTINUE
      WRITE(*,*)NNNN,NNN,NN
      WRITE(*,100)DWW,IWW,(DWIT(J),IWIT(J),J=1,NN)
 100  FORMAT(' MAX D(OMEGA)/OMEGA',1PE12.3,' AT PT.',I5,
     *   ' BY ITERATION'/5(1X,E11.3,I4))
      IF(NNN.LE.2)THEN
         DO K = 1,NTOT
            EWIT(K) = EWPREV(K)
            EWIT2(K) = EWPREV(K)
         END DO
      ELSE
         DO K = 1,NTOT
            EWIT(K) = EWPREV(K)
            EWIT2(K) = 0.5D0*EWIT(K)+0.5D0*EWPREV(K)
         END DO
      ENDIF
      IF(ABS(DWI).LE.DJOK .AND. NNN.GE.2)THEN
         GOTO 9999
      ELSE
         LOKAD = .FALSE.
      ENDIF
      END DO
 9999 CONTINUE
      DO K = 1,NTOT
         EWT(K) = EWPREV(K)
      END DO
      SUMJ = SUMJ + DELJ
      DO K = 2,NTOT
         WMP(K) = 0.5D0*(EWPREV(K)+EWPREV(K-1))
         QWRP(K) = QCHIRE(K)*(EWPREV(K)-EWPREV(K-1))/DR
      END DO
      END DO
 950  CONTINUE
      IF(.NOT.LOKAD)THEN
         NCUT = NCUT + 1
         NSTEP = 2*NSTEP
         IF(NCUT.GT.5)THEN
            WRITE(*,*)'TIMESTEP CUT MORE THAN 5 TIMES - RUN STOPPED'
            STOP 111
         ELSE
            WRITE(*,*)'TIMESTEP CUT #',NCUT,' IN DADCOEFT'
         ENDIF
         GOTO 5
      ENDIF
      WRITE(*,914)B(1),EW(1),B(2),B(3),B(4)
 914  FORMAT(1P5E12.3)
      DO I = 2,NTOT
         II = 1 + 4*(I-1)
         WMM = 0.5D0*(B(II)+B(II-4))
         W2M = 0.5D0*(B(II+1)+B(II-3))
         V0 = ECOD3(I)/FGEOM(I)
         V1 = ECOD4(I)/FGEOM(I)*B(II-2)*QCHIRE(I)/WMM
         V1E = 0.2D0*FW*EV0(I)*WMM*QCHIRE(I)*(EV2A(I)+EV2B(I))*B(II-2)
         IF(ECOD4(I).LE.0.0D0)V1E = 0.0D0
         V2 = ECOD5(I)/FGEOM(I)*QCHIRE(I)*W2M/WMM
         V3 = ECOD6(I)/FGEOM(I)*B(II-1)*QCHIRE(I)/WMM
         VTOT = V0+ V1 + V2 + V3
         VTOT2 = V0 + V1E + V2 + V3
         IF(I.LE.10 .OR. (NTOT-I).LE.10)THEN
         WRITE(*,911)B(II),EW(I),V0,V1,V2,V3,VTOT,
     *               B(II+1),B(II+2),B(II+3)
         ENDIF
         VESN(I) = 5.0D0*ABS(FC*FESC*VTOT2*REQ(I))
         DCMIX = (VESN(I)+FC*FSSC*ESS(I)+FC*FGSFC*EGSF(I))
         ECOD2(I) = DCMIX*FGEOMIX(I)
C         WRITE(*,1111)I,VESN(I),DCMIX,ECOD2(I),REQ(I)
 911  FORMAT(1P10E12.3)
 1111 FORMAT(I5,1P4E12.3)
      END DO
      DT = DT0
      DELJ0 = DELJ/FXX
      WRITE(*,*)SUMDJ,DELJ0
C      IF(.NOT.LOKAD)THEN
C         SUMDJ = 0.0D0
C         DO I = 1,NTOT
C            DJ(I) = (EWPREV(I)-EW(I))*EI(I)
C            SUMDJ = SUMDJ + DJ(I)
C         END DO
C      ENDIF
C      LOKAD = .TRUE.
      RETURN
      END
