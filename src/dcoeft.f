C $$$$$$
      SUBROUTINE DCOEFT(ECOD,DR,DT,EI,EJ,EW,NTOT,WIND1,WIND2,LFIX)

      PARAMETER (JSON=5000)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT LOGICAL*4(L)
      COMMON/TRIDI/A(JSON),B(JSON),C(JSON),D(JSON),U(JSON),GAMA(JSON)
      COMMON/DIFAD/ECOD3(JSON),ECOD4(JSON)
C MHP 7/93
      COMMON/VARFC/VFC(JSON),LVFC,LDIFAD
      DIMENSION ECOD(JSON),EI(JSON),EW(JSON),EJ(JSON)
      SAVE
C  DCOEFT SETS UP THE COEFFICIENTS FOR THE DIFFUSION DIFFERENCE EQUATION.
C
C  INPUT VARIABLES:
C  ECOD : DIFFUSION COEFFICIENTS AT THE EQUALLY SPACED GRID POINTS.
C  DR : GRID SPACING.
C  DT : TIMESTEP.
C  EI : RUN OF MOMENTS OF INERTIA OF EQUALLY SPACED GRID POINTS.
C  EW : RUN OF ANGULAR VELOCITY OF EQUALLY SPACED GRID POINTS.
C  NTOT : NUMBER OF EQUALLY SPACED GRID POINTS.
C  WIND1 : THE ANGULAR MOMENTUM LOSS FROM A SURFACE C.Z. COMPUTED 
C     EXPLICITILY.
C  WIND2 : AS WIND1, BUT COMPUTED IMPLICITLY.
C  *NOTE: IF NOT APPLICABLE, WIND1 AND WIND2 ARE ZEROED OUT.
C
C  OUTPUT VARIABLES :
C  THE ANGULAR VELOCITY OF SHELL I AT TIME N+1 (W(I,N+1)) IS A FUNCTION OF
C  W(I-1),W(I),AND W(I+1) AS DISCUSSED BELOW.  THIS CAN BE EXPRESSED
C  AS A TRIDIAGONAL MATRIX.
C  A(I) : CONTAINS ALL TERMS INVOLVING OMEGA(I-1).
C  B(I) : CONTAINS ALL TERMS INVOLVING OMEGA(I).
C  C(I) : CONTAINS ALL TERMS INVOLVING OMEGA(I+1)
C  D(I) : THE ANGULAR VELOCITY TERMS AT THE BEGINNING OF THE TIMESTEP.
C  *NOTE: ANGULAR MOMENTUM LOSS FROM A SURFACE C.Z. IS SUBTRACTED FROM
C     THE LAST ELEMENT OF ARRAY D IF APPLICABLE.
C
C  THE DIFFUSION EQUATION WE ARE SOLVING IS 
C  dW/dT = 1/(4pi*RHO*R**2) 1/(I/M) d/dR(D*dW/dR)
C  WHERE D IS OUR DIFFUSION COEFFICIENT,W IS THE ANGULAR VELOCITY, 
C  I IS THE MOMENT OF INERTIA,M IS MASS,T IS TIME,R IS RADIUS, 
C  AND RHO IS DENSITY.
C  USING M = 4pi*RHO*R**2*DR THIS IS DIFFERENCED FOR SHELL I AS 
C  W(I,N+1)-W(I,N)=(DT/DR)*(1/I)*(D(I+1/2)*(W(I+1,N+1)-W(I,N+1)) -
C  D(I-1/2)*(W(I,N+1)-W(I-1,N+1)))
C  WHERE INDEX N+1 REFERS TO VALUES AT THE END OF THE TIMESTEP,AND 
C  INDEX N REFERS TO VALUES AT THE BEGINNING OF THE TIMESTEP.
C  THIS SYSTEM IS SUPPLEMENTED WITH APPROPRIATE BOUNDARY CONDITIONS.
C
      FACT0 = DT/DR
      DO 10 I = 1,NTOT
         D(I) = EW(I)
   10 CONTINUE
      GAMA(NTOT) = -0.5D0*(WIND1+WIND2)*EI(NTOT)      
      D(NTOT) = D(NTOT)*(1.0D0+GAMA(NTOT)/EJ(NTOT))
      IF(.NOT.LDIFAD)THEN
C  FIRST SHELL BOUNDARY CONDITIONS: NO FLOW BELOW THE BOUNDARY
C  I.E. THE ANGULAR MOMENTUM TRANSPORT AT THE FIRST SHELL DOES NOT
C  DEPEND ON THE SHELLS BELOW IT.
         FACT = FACT0/EI(1)
         A(1) = 0.0D0
         B(1) = 1.0D0 + FACT*ECOD(2)
         C(1) = -FACT*ECOD(2)
         DO 20 I = 2,NTOT-1
            FACT = FACT0/EI(I)
            A(I) = -FACT*ECOD(I)
            B(I) = 1.0D0 + FACT*(ECOD(I)+ECOD(I+1))
            C(I) = -FACT*ECOD(I+1)
   20    CONTINUE
C  LAST SHELL B.C. : SAME AS FIRST SHELL B.C.
         FACT = FACT0/EI(NTOT)
         IF(.NOT.LFIX)THEN
            A(NTOT) = -FACT*ECOD(NTOT)
            B(NTOT) = 1.0D0 + FACT*ECOD(NTOT)
         ELSE
            A(NTOT) = 0.0D0
            B(NTOT) = 1.0D0
         ENDIF
         C(NTOT) = 0.0D0
      ELSE
C IF LDIFAD=T, WE ARE SOLVING A COMBINED DIFFUSION/ADVECTION EQUATION.
C THIS ADDS A TERM D/DR(RHO*R**4*V*W) TO THE ORIGINAL D/DR(RHO*R**4*
C V*R*DW/DR) EQUATION.  
C  FIRST SHELL BOUNDARY CONDITIONS: NO FLOW BELOW THE BOUNDARY
C  I.E. THE ANGULAR MOMENTUM TRANSPORT AT THE FIRST SHELL DOES NOT
C  DEPEND ON THE SHELLS BELOW IT.
         FACT = FACT0/EI(1)
         FACTA = 0.5D0*DT/EI(1)
         A(1) = 0.0D0
         B(1) = 1.0D0 + FACT*ECOD4(2) - FACTA*ECOD3(2)
         C(1) = -FACT*ECOD4(2) - FACTA*ECOD3(2)
         DO I = 2,NTOT-1
            FACT = FACT0/EI(I)
            FACTA = 0.5D0*DT/EI(I)
            A(I) = -FACT*ECOD4(I) + FACTA*ECOD3(I)
            B(I) = 1.0D0 + FACT*(ECOD4(I)+ECOD4(I+1)) +
     *             FACTA*(ECOD3(I)-ECOD3(I+1))
            C(I) = -FACT*ECOD4(I+1) - FACTA*ECOD3(I+1)
         END DO
C  LAST SHELL B.C. : SAME AS FIRST SHELL B.C.
         FACT = FACT0/EI(NTOT)
         FACTA = 0.5D0*DT/EI(NTOT)
         IF(.NOT.LFIX)THEN
            A(NTOT) = -FACT*ECOD4(NTOT) + FACTA*ECOD3(NTOT)
            B(NTOT) = 1.0D0 + FACT*ECOD4(NTOT) + FACTA*ECOD3(NTOT)
         ELSE
            A(NTOT) = 0.0D0
            B(NTOT) = 1.0D0
         ENDIF
         C(NTOT) = 0.0D0
      ENDIF

      RETURN
      END
